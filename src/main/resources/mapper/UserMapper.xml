<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kason.app.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.kason.app.entity.User" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="role" property="role" jdbcType="INTEGER" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="wechar_openid" property="wecharOpenid" jdbcType="VARCHAR" />
    <result column="qq_number" property="qqNumber" jdbcType="VARCHAR" />
    <result column="qq_openid" property="qqOpenid" jdbcType="VARCHAR" />
    <result column="cer_id" property="cerId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, username, password, role, token, create_date, status, wechar_openid, qq_number, 
    qq_openid, cer_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER} and status=1
  </select>
  <select id="selectByUsernameAndPassowrd" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username,jdbcType=VARCHAR}
    and password = #{password,jdbcType=VARCHAR}
    and status=1
  </select>
  <select id="selectByUserName" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username,jdbcType=VARCHAR}
    and status=1
  </select>
  <select id="selectByToken" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from user
    where token = #{token,jdbcType=VARCHAR}
    and status=1
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.kason.app.entity.User"  useGeneratedKeys="true" keyProperty="userId" >
    insert into user (user_id, username, password, 
      role, token, create_date, 
      status, wechar_openid, qq_number, 
      qq_openid, cer_id)
    values (#{userId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{role,jdbcType=INTEGER}, #{token,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{wecharOpenid,jdbcType=VARCHAR}, #{qqNumber,jdbcType=VARCHAR}, 
      #{qqOpenid,jdbcType=VARCHAR}, #{cerId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.kason.app.entity.User" useGeneratedKeys="true" keyProperty="userId" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="token != null" >
        token,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="wecharOpenid != null" >
        wechar_openid,
      </if>
      <if test="qqNumber != null" >
        qq_number,
      </if>
      <if test="qqOpenid != null" >
        qq_openid,
      </if>
      <if test="cerId != null" >
        cer_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=INTEGER},
      </if>
      <if test="token != null" >
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="wecharOpenid != null" >
        #{wecharOpenid,jdbcType=VARCHAR},
      </if>
      <if test="qqNumber != null" >
        #{qqNumber,jdbcType=VARCHAR},
      </if>
      <if test="qqOpenid != null" >
        #{qqOpenid,jdbcType=VARCHAR},
      </if>
      <if test="cerId != null" >
        #{cerId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.kason.app.entity.User" >
    update user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="token != null" >
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="wecharOpenid != null" >
        wechar_openid = #{wecharOpenid,jdbcType=VARCHAR},
      </if>
      <if test="qqNumber != null" >
        qq_number = #{qqNumber,jdbcType=VARCHAR},
      </if>
      <if test="qqOpenid != null" >
        qq_openid = #{qqOpenid,jdbcType=VARCHAR},
      </if>
      <if test="cerId != null" >
        cer_id = #{cerId,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kason.app.entity.User" >
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      token = #{token,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      wechar_openid = #{wecharOpenid,jdbcType=VARCHAR},
      qq_number = #{qqNumber,jdbcType=VARCHAR},
      qq_openid = #{qqOpenid,jdbcType=VARCHAR},
      cer_id = #{cerId,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
</mapper>